/* libcommon.h generated by valac 0.35.3.8-bc5b, the Vala compiler, do not modify */


#ifndef __LIBCOMMON_H__
#define __LIBCOMMON_H__

#include <glib.h>
#include <glib-object.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>
#include <float.h>
#include <math.h>
#include <archive.h>
#include <archive_entry.h>

G_BEGIN_DECLS


#define BOXES_TYPE_ASYNC_LAUNCHER (boxes_async_launcher_get_type ())
#define BOXES_ASYNC_LAUNCHER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BOXES_TYPE_ASYNC_LAUNCHER, BoxesAsyncLauncher))
#define BOXES_ASYNC_LAUNCHER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BOXES_TYPE_ASYNC_LAUNCHER, BoxesAsyncLauncherClass))
#define BOXES_IS_ASYNC_LAUNCHER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BOXES_TYPE_ASYNC_LAUNCHER))
#define BOXES_IS_ASYNC_LAUNCHER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BOXES_TYPE_ASYNC_LAUNCHER))
#define BOXES_ASYNC_LAUNCHER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BOXES_TYPE_ASYNC_LAUNCHER, BoxesAsyncLauncherClass))

typedef struct _BoxesAsyncLauncher BoxesAsyncLauncher;
typedef struct _BoxesAsyncLauncherClass BoxesAsyncLauncherClass;
typedef struct _BoxesAsyncLauncherPrivate BoxesAsyncLauncherPrivate;

#define BOXES_TYPE_ICONFIG (boxes_iconfig_get_type ())
#define BOXES_ICONFIG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BOXES_TYPE_ICONFIG, BoxesIConfig))
#define BOXES_IS_ICONFIG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BOXES_TYPE_ICONFIG))
#define BOXES_ICONFIG_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), BOXES_TYPE_ICONFIG, BoxesIConfigIface))

typedef struct _BoxesIConfig BoxesIConfig;
typedef struct _BoxesIConfigIface BoxesIConfigIface;

#define BOXES_TYPE_BOX_CONFIG (boxes_box_config_get_type ())
#define BOXES_BOX_CONFIG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BOXES_TYPE_BOX_CONFIG, BoxesBoxConfig))
#define BOXES_BOX_CONFIG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BOXES_TYPE_BOX_CONFIG, BoxesBoxConfigClass))
#define BOXES_IS_BOX_CONFIG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BOXES_TYPE_BOX_CONFIG))
#define BOXES_IS_BOX_CONFIG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BOXES_TYPE_BOX_CONFIG))
#define BOXES_BOX_CONFIG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BOXES_TYPE_BOX_CONFIG, BoxesBoxConfigClass))

typedef struct _BoxesBoxConfig BoxesBoxConfig;
typedef struct _BoxesBoxConfigClass BoxesBoxConfigClass;
typedef struct _BoxesBoxConfigPrivate BoxesBoxConfigPrivate;

#define BOXES_TYPE_COLLECTION_SOURCE (boxes_collection_source_get_type ())
#define BOXES_COLLECTION_SOURCE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BOXES_TYPE_COLLECTION_SOURCE, BoxesCollectionSource))
#define BOXES_COLLECTION_SOURCE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BOXES_TYPE_COLLECTION_SOURCE, BoxesCollectionSourceClass))
#define BOXES_IS_COLLECTION_SOURCE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BOXES_TYPE_COLLECTION_SOURCE))
#define BOXES_IS_COLLECTION_SOURCE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BOXES_TYPE_COLLECTION_SOURCE))
#define BOXES_COLLECTION_SOURCE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BOXES_TYPE_COLLECTION_SOURCE, BoxesCollectionSourceClass))

typedef struct _BoxesCollectionSource BoxesCollectionSource;
typedef struct _BoxesCollectionSourceClass BoxesCollectionSourceClass;

#define BOXES_BOX_CONFIG_TYPE_SAVED_PROPERTY (boxes_box_config_saved_property_get_type ())
typedef struct _BoxesBoxConfigSavedProperty BoxesBoxConfigSavedProperty;
typedef struct _BoxesCollectionSourcePrivate BoxesCollectionSourcePrivate;

#define BOXES_TYPE_PAIR (boxes_pair_get_type ())
#define BOXES_PAIR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BOXES_TYPE_PAIR, BoxesPair))
#define BOXES_PAIR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BOXES_TYPE_PAIR, BoxesPairClass))
#define BOXES_IS_PAIR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BOXES_TYPE_PAIR))
#define BOXES_IS_PAIR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BOXES_TYPE_PAIR))
#define BOXES_PAIR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BOXES_TYPE_PAIR, BoxesPairClass))

typedef struct _BoxesPair BoxesPair;
typedef struct _BoxesPairClass BoxesPairClass;
typedef struct _BoxesPairPrivate BoxesPairPrivate;

#define BOXES_TYPE_QUERY (boxes_query_get_type ())
#define BOXES_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BOXES_TYPE_QUERY, BoxesQuery))
#define BOXES_QUERY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BOXES_TYPE_QUERY, BoxesQueryClass))
#define BOXES_IS_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BOXES_TYPE_QUERY))
#define BOXES_IS_QUERY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BOXES_TYPE_QUERY))
#define BOXES_QUERY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BOXES_TYPE_QUERY, BoxesQueryClass))

typedef struct _BoxesQuery BoxesQuery;
typedef struct _BoxesQueryClass BoxesQueryClass;
typedef struct _BoxesQueryPrivate BoxesQueryPrivate;

#define BOXES_TYPE_ACTIVITY_PROGRESS (boxes_activity_progress_get_type ())
#define BOXES_ACTIVITY_PROGRESS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BOXES_TYPE_ACTIVITY_PROGRESS, BoxesActivityProgress))
#define BOXES_ACTIVITY_PROGRESS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BOXES_TYPE_ACTIVITY_PROGRESS, BoxesActivityProgressClass))
#define BOXES_IS_ACTIVITY_PROGRESS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BOXES_TYPE_ACTIVITY_PROGRESS))
#define BOXES_IS_ACTIVITY_PROGRESS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BOXES_TYPE_ACTIVITY_PROGRESS))
#define BOXES_ACTIVITY_PROGRESS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BOXES_TYPE_ACTIVITY_PROGRESS, BoxesActivityProgressClass))

typedef struct _BoxesActivityProgress BoxesActivityProgress;
typedef struct _BoxesActivityProgressClass BoxesActivityProgressClass;
typedef struct _BoxesActivityProgressPrivate BoxesActivityProgressPrivate;

#define BOXES_FDO_TYPE_ACCOUNTS (boxes_fdo_accounts_get_type ())
#define BOXES_FDO_ACCOUNTS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BOXES_FDO_TYPE_ACCOUNTS, BoxesFdoAccounts))
#define BOXES_FDO_IS_ACCOUNTS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BOXES_FDO_TYPE_ACCOUNTS))
#define BOXES_FDO_ACCOUNTS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), BOXES_FDO_TYPE_ACCOUNTS, BoxesFdoAccountsIface))

typedef struct _BoxesFdoAccounts BoxesFdoAccounts;
typedef struct _BoxesFdoAccountsIface BoxesFdoAccountsIface;

#define BOXES_FDO_TYPE_ACCOUNTS_PROXY (boxes_fdo_accounts_proxy_get_type ())

#define BOXES_FDO_TYPE_ACCOUNTS_USER (boxes_fdo_accounts_user_get_type ())
#define BOXES_FDO_ACCOUNTS_USER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BOXES_FDO_TYPE_ACCOUNTS_USER, BoxesFdoAccountsUser))
#define BOXES_FDO_IS_ACCOUNTS_USER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BOXES_FDO_TYPE_ACCOUNTS_USER))
#define BOXES_FDO_ACCOUNTS_USER_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), BOXES_FDO_TYPE_ACCOUNTS_USER, BoxesFdoAccountsUserIface))

typedef struct _BoxesFdoAccountsUser BoxesFdoAccountsUser;
typedef struct _BoxesFdoAccountsUserIface BoxesFdoAccountsUserIface;

#define BOXES_FDO_TYPE_ACCOUNTS_USER_PROXY (boxes_fdo_accounts_user_proxy_get_type ())

struct _BoxesAsyncLauncher {
	GTypeInstance parent_instance;
	volatile int ref_count;
	BoxesAsyncLauncherPrivate * priv;
};

struct _BoxesAsyncLauncherClass {
	GTypeClass parent_class;
	void (*finalize) (BoxesAsyncLauncher *self);
};

typedef void (*BoxesAsyncLauncherRunInThreadFunc) (void* user_data, GError** error);
struct _BoxesIConfigIface {
	GTypeInterface parent_iface;
	GKeyFile* (*get_keyfile) (BoxesIConfig* self);
	const gchar* (*get_filename) (BoxesIConfig* self);
	void (*set_filename) (BoxesIConfig* self, const gchar* value);
	gboolean (*get_has_file) (BoxesIConfig* self);
	void (*set_has_file) (BoxesIConfig* self, gboolean value);
};

struct _BoxesBoxConfig {
	GObject parent_instance;
	BoxesBoxConfigPrivate * priv;
};

struct _BoxesBoxConfigClass {
	GObjectClass parent_class;
};

struct _BoxesBoxConfigSavedProperty {
	gchar* name;
	GValue default_value;
};

struct _BoxesCollectionSource {
	GObject parent_instance;
	BoxesCollectionSourcePrivate * priv;
};

struct _BoxesCollectionSourceClass {
	GObjectClass parent_class;
};

typedef enum  {
	BOXES_ERROR_INVALID,
	BOXES_ERROR_RESTORE_FAILED,
	BOXES_ERROR_START_FAILED,
	BOXES_ERROR_COMMAND_FAILED
} BoxesError;
#define BOXES_ERROR boxes_error_quark ()
typedef gboolean (*BoxesForeachFilenameFromDirFunc) (const gchar* filename, void* user_data, GError** error);
struct _BoxesPair {
	GTypeInstance parent_instance;
	volatile int ref_count;
	BoxesPairPrivate * priv;
	gpointer first;
	gpointer second;
};

struct _BoxesPairClass {
	GTypeClass parent_class;
	void (*finalize) (BoxesPair *self);
};

struct _BoxesQuery {
	GObject parent_instance;
	BoxesQueryPrivate * priv;
};

struct _BoxesQueryClass {
	GObjectClass parent_class;
};

struct _BoxesActivityProgress {
	GObject parent_instance;
	BoxesActivityProgressPrivate * priv;
};

struct _BoxesActivityProgressClass {
	GObjectClass parent_class;
};

typedef int (*BoxesLibarchiveFunction) (void* user_data);
struct _BoxesFdoAccountsIface {
	GTypeInterface parent_iface;
	void (*FindUserByName) (BoxesFdoAccounts* self, const gchar* name, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*FindUserByName_finish) (BoxesFdoAccounts* self, GAsyncResult* _res_, GError** error);
};

struct _BoxesFdoAccountsUserIface {
	GTypeInterface parent_iface;
	gboolean (*get_AutomaticLogin) (BoxesFdoAccountsUser* self);
	gboolean (*get_Locked) (BoxesFdoAccountsUser* self);
	gboolean (*get_SystemAccount) (BoxesFdoAccountsUser* self);
	gint32 (*get_AccountType) (BoxesFdoAccountsUser* self);
	gint32 (*get_PasswordMode) (BoxesFdoAccountsUser* self);
	gchar* (*get_Email) (BoxesFdoAccountsUser* self);
	gchar* (*get_HomeDirectory) (BoxesFdoAccountsUser* self);
	gchar* (*get_IconFile) (BoxesFdoAccountsUser* self);
	gchar* (*get_Language) (BoxesFdoAccountsUser* self);
	gchar* (*get_Location) (BoxesFdoAccountsUser* self);
	gchar* (*get_RealName) (BoxesFdoAccountsUser* self);
	gchar* (*get_Shell) (BoxesFdoAccountsUser* self);
	gchar* (*get_UserName) (BoxesFdoAccountsUser* self);
	gchar* (*get_XSession) (BoxesFdoAccountsUser* self);
};


gpointer boxes_async_launcher_ref (gpointer instance);
void boxes_async_launcher_unref (gpointer instance);
GParamSpec* boxes_param_spec_async_launcher (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void boxes_value_set_async_launcher (GValue* value, gpointer v_object);
void boxes_value_take_async_launcher (GValue* value, gpointer v_object);
gpointer boxes_value_get_async_launcher (const GValue* value);
GType boxes_async_launcher_get_type (void) G_GNUC_CONST;
BoxesAsyncLauncher* boxes_async_launcher_get_default (void);
void boxes_async_launcher_launch (BoxesAsyncLauncher* self, BoxesAsyncLauncherRunInThreadFunc func, void* func_target, GDestroyNotify func_target_destroy_notify, GAsyncReadyCallback _callback_, gpointer _user_data_);
void boxes_async_launcher_launch_finish (BoxesAsyncLauncher* self, GAsyncResult* _res_, GError** error);
void boxes_async_launcher_await_all (BoxesAsyncLauncher* self);
GType boxes_iconfig_get_type (void) G_GNUC_CONST;
GType boxes_box_config_get_type (void) G_GNUC_CONST;
GType boxes_collection_source_get_type (void) G_GNUC_CONST;
BoxesBoxConfig* boxes_box_config_new_with_group (BoxesCollectionSource* source, const gchar* group);
BoxesBoxConfig* boxes_box_config_construct_with_group (GType object_type, BoxesCollectionSource* source, const gchar* group);
void boxes_box_config_delete (BoxesBoxConfig* self);
void boxes_box_config_set_category (BoxesBoxConfig* self, const gchar* category, gboolean enabled);
GType boxes_box_config_saved_property_get_type (void) G_GNUC_CONST;
BoxesBoxConfigSavedProperty* boxes_box_config_saved_property_dup (const BoxesBoxConfigSavedProperty* self);
void boxes_box_config_saved_property_free (BoxesBoxConfigSavedProperty* self);
void boxes_box_config_saved_property_copy (const BoxesBoxConfigSavedProperty* self, BoxesBoxConfigSavedProperty* dest);
void boxes_box_config_saved_property_destroy (BoxesBoxConfigSavedProperty* self);
void boxes_box_config_save_properties (BoxesBoxConfig* self, GObject* object, BoxesBoxConfigSavedProperty* properties, int properties_length1);
gboolean boxes_box_config_contains_strings (BoxesBoxConfig* self, gchar** strings, int strings_length1);
gint boxes_box_config_compare (BoxesBoxConfig* self, BoxesBoxConfig* other);
BoxesBoxConfig* boxes_box_config_new (void);
BoxesBoxConfig* boxes_box_config_construct (GType object_type);
const gchar* boxes_box_config_get_group (BoxesBoxConfig* self);
gchar* boxes_box_config_get_last_seen_name (BoxesBoxConfig* self);
void boxes_box_config_set_last_seen_name (BoxesBoxConfig* self, const gchar* value);
gchar* boxes_box_config_get_uuid (BoxesBoxConfig* self);
void boxes_box_config_set_uuid (BoxesBoxConfig* self, const gchar* value);
gchar** boxes_box_config_get_categories (BoxesBoxConfig* self, int* result_length1);
void boxes_box_config_set_categories (BoxesBoxConfig* self, gchar** value, int value_length1);
gint64 boxes_box_config_get_access_last_time (BoxesBoxConfig* self);
void boxes_box_config_set_access_last_time (BoxesBoxConfig* self, gint64 value);
gint64 boxes_box_config_get_access_first_time (BoxesBoxConfig* self);
void boxes_box_config_set_access_first_time (BoxesBoxConfig* self, gint64 value);
gint64 boxes_box_config_get_access_total_time (BoxesBoxConfig* self);
void boxes_box_config_set_access_total_time (BoxesBoxConfig* self, gint64 value);
gint64 boxes_box_config_get_access_ntimes (BoxesBoxConfig* self);
void boxes_box_config_set_access_ntimes (BoxesBoxConfig* self, gint64 value);
void boxes_iconfig_save (BoxesIConfig* self);
gboolean boxes_iconfig_get_boolean (BoxesIConfig* self, const gchar* group, const gchar* key, gboolean default_value);
void boxes_iconfig_set_boolean (BoxesIConfig* self, const gchar* group, const gchar* key, gboolean value);
void boxes_iconfig_load (BoxesIConfig* self, GError** error);
gchar* boxes_iconfig_get_string (BoxesIConfig* self, const gchar* group, const gchar* key);
gchar** boxes_iconfig_get_string_list (BoxesIConfig* self, const gchar* group, const gchar* key, int* result_length1);
gchar** boxes_iconfig_get_groups (BoxesIConfig* self, const gchar* with_prefix, int* result_length1);
GKeyFile* boxes_iconfig_get_keyfile (BoxesIConfig* self);
const gchar* boxes_iconfig_get_filename (BoxesIConfig* self);
void boxes_iconfig_set_filename (BoxesIConfig* self, const gchar* value);
gboolean boxes_iconfig_get_has_file (BoxesIConfig* self);
void boxes_iconfig_set_has_file (BoxesIConfig* self, gboolean value);
BoxesCollectionSource* boxes_collection_source_new (const gchar* name, const gchar* source_type, const gchar* uri);
BoxesCollectionSource* boxes_collection_source_construct (GType object_type, const gchar* name, const gchar* source_type, const gchar* uri);
BoxesCollectionSource* boxes_collection_source_new_with_file (const gchar* filename, GError** error);
BoxesCollectionSource* boxes_collection_source_construct_with_file (GType object_type, const gchar* filename, GError** error);
void boxes_collection_source_delete (BoxesCollectionSource* self);
void boxes_collection_source_purge_stale_box_configs (BoxesCollectionSource* self, GList* used_configs);
gchar* boxes_collection_source_get_name (BoxesCollectionSource* self);
void boxes_collection_source_set_name (BoxesCollectionSource* self, const gchar* value);
gchar* boxes_collection_source_get_source_type (BoxesCollectionSource* self);
void boxes_collection_source_set_source_type (BoxesCollectionSource* self, const gchar* value);
gchar* boxes_collection_source_get_uri (BoxesCollectionSource* self);
void boxes_collection_source_set_uri (BoxesCollectionSource* self, const gchar* value);
gboolean boxes_collection_source_get_enabled (BoxesCollectionSource* self);
void boxes_collection_source_set_enabled (BoxesCollectionSource* self, gboolean value);
GQuark boxes_error_quark (void);
gchar* boxes_get_pkgdata (const gchar* file_name);
gchar* boxes_get_pixmap (const gchar* file_name);
gchar* boxes_get_unattended (const gchar* file_name);
gchar* boxes_get_pkgdata_source (const gchar* file_name);
gchar* boxes_get_logos_db (void);
gchar* boxes_get_user_unattended (const gchar* file_name);
gchar* boxes_get_user_pkgcache (const gchar* file_name);
gchar* boxes_get_system_pkgcache (const gchar* file_name);
gchar* boxes_get_user_pkgconfig (const gchar* file_name);
gchar* boxes_get_user_pkgdata (const gchar* file_name);
gboolean boxes_has_user_pkgconfig_sources (void);
gchar* boxes_get_user_pkgconfig_source (const gchar* file_name);
gchar* boxes_get_utf8_basename (const gchar* path);
gchar* boxes_get_system_logo_cache (const gchar* file_name);
gchar* boxes_get_logo_cache (const gchar* file_name);
gchar* boxes_get_drivers_cache (const gchar* file_name);
gchar* boxes_get_cache (const gchar* cache_name, const gchar* file_name);
gchar* boxes_get_system_drivers_cache (const gchar* file_name);
gchar* boxes_get_screenshot_filename (const gchar* prefix);
void boxes_ensure_directory (const gchar* dir);
gboolean boxes_keyfile_save (GKeyFile* key_file, const gchar* file_name, gboolean overwrite);
void boxes_output_stream_write (GOutputStream* stream, guint8* buffer, int buffer_length1, GAsyncReadyCallback _callback_, gpointer _user_data_);
void boxes_output_stream_write_finish (GAsyncResult* _res_, GError** error);
gchar* boxes_replace_regex (const gchar* str, const gchar* old, const gchar* replacement);
gchar* boxes_make_filename (const gchar* name);
void boxes_delete_file (GFile* file, GError** error);
void boxes_foreach_filename_from_dir (GFile* dir, BoxesForeachFilenameFromDirFunc func, void* func_target, GAsyncReadyCallback _callback_, gpointer _user_data_);
void boxes_foreach_filename_from_dir_finish (GAsyncResult* _res_);
void boxes_exec (gchar** argv, int argv_length1, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
void boxes_exec_finish (GAsyncResult* _res_, gchar* * standard_output, gchar* * standard_error, GError** error);
void boxes_exec_sync (gchar** argv, int argv_length1, gchar* * standard_output, gchar* * standard_error, GError** error);
gint boxes_get_enum_value (const gchar* value_nick, GType enum_type);
gpointer boxes_pair_ref (gpointer instance);
void boxes_pair_unref (gpointer instance);
GParamSpec* boxes_param_spec_pair (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void boxes_value_set_pair (GValue* value, gpointer v_object);
void boxes_value_take_pair (GValue* value, gpointer v_object);
gpointer boxes_value_get_pair (const GValue* value);
GType boxes_pair_get_type (void) G_GNUC_CONST;
BoxesPair* boxes_pair_new (GType t1_type, GBoxedCopyFunc t1_dup_func, GDestroyNotify t1_destroy_func, GType t2_type, GBoxedCopyFunc t2_dup_func, GDestroyNotify t2_destroy_func, gconstpointer first, gconstpointer second);
BoxesPair* boxes_pair_construct (GType object_type, GType t1_type, GBoxedCopyFunc t1_dup_func, GDestroyNotify t1_destroy_func, GType t2_type, GBoxedCopyFunc t2_dup_func, GDestroyNotify t2_destroy_func, gconstpointer first, gconstpointer second);
GType boxes_query_get_type (void) G_GNUC_CONST;
BoxesQuery* boxes_query_new (const gchar* query);
BoxesQuery* boxes_query_construct (GType object_type, const gchar* query);
void boxes_query_parse (BoxesQuery* self);
gchar* boxes_query_get (BoxesQuery* self, const gchar* key);
GType boxes_activity_progress_get_type (void) G_GNUC_CONST;
BoxesActivityProgress* boxes_activity_progress_add_child_activity (BoxesActivityProgress* self, gdouble scale);
BoxesActivityProgress* boxes_activity_progress_new (void);
BoxesActivityProgress* boxes_activity_progress_construct (GType object_type);
gdouble boxes_activity_progress_get_progress (BoxesActivityProgress* self);
void boxes_activity_progress_set_progress (BoxesActivityProgress* self, gdouble value);
const gchar* boxes_activity_progress_get_info (BoxesActivityProgress* self);
void boxes_activity_progress_set_info (BoxesActivityProgress* self, const gchar* value);
gboolean boxes_is_set (const gchar* str);
gchar* boxes_yes_no (gboolean value);
gchar* boxes_indent (const gchar* space, const gchar* text);
void boxes_execute_libarchive_function (struct archive* archive, BoxesLibarchiveFunction function, void* function_target, guint num_retries, GError** error);
gboolean boxes_get_next_header (struct archive* archive, struct archive_entry* * iterator, guint num_retries, GError** error);
gchar* boxes_canonicalize_for_search (const gchar* str);
GType boxes_fdo_accounts_proxy_get_type (void) G_GNUC_CONST;
guint boxes_fdo_accounts_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType boxes_fdo_accounts_get_type (void) G_GNUC_CONST;
void boxes_fdo_accounts_FindUserByName (BoxesFdoAccounts* self, const gchar* name, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* boxes_fdo_accounts_FindUserByName_finish (BoxesFdoAccounts* self, GAsyncResult* _res_, GError** error);
GType boxes_fdo_accounts_user_get_type (void) G_GNUC_CONST;
GType boxes_fdo_accounts_user_proxy_get_type (void) G_GNUC_CONST;
guint boxes_fdo_accounts_user_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
gboolean boxes_fdo_accounts_user_get_AutomaticLogin (BoxesFdoAccountsUser* self);
gboolean boxes_fdo_accounts_user_get_Locked (BoxesFdoAccountsUser* self);
gboolean boxes_fdo_accounts_user_get_SystemAccount (BoxesFdoAccountsUser* self);
gint32 boxes_fdo_accounts_user_get_AccountType (BoxesFdoAccountsUser* self);
gint32 boxes_fdo_accounts_user_get_PasswordMode (BoxesFdoAccountsUser* self);
gchar* boxes_fdo_accounts_user_get_Email (BoxesFdoAccountsUser* self);
gchar* boxes_fdo_accounts_user_get_HomeDirectory (BoxesFdoAccountsUser* self);
gchar* boxes_fdo_accounts_user_get_IconFile (BoxesFdoAccountsUser* self);
gchar* boxes_fdo_accounts_user_get_Language (BoxesFdoAccountsUser* self);
gchar* boxes_fdo_accounts_user_get_Location (BoxesFdoAccountsUser* self);
gchar* boxes_fdo_accounts_user_get_RealName (BoxesFdoAccountsUser* self);
gchar* boxes_fdo_accounts_user_get_Shell (BoxesFdoAccountsUser* self);
gchar* boxes_fdo_accounts_user_get_UserName (BoxesFdoAccountsUser* self);
gchar* boxes_fdo_accounts_user_get_XSession (BoxesFdoAccountsUser* self);


G_END_DECLS

#endif
